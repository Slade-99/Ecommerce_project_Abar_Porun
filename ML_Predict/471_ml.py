# -*- coding: utf-8 -*-
"""471 ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19je6M_hKPXV-nLjk1UFngKSOztJKYsEC

**Data Preprocessing**
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

dataset_path = "C:/Users/taran/Downloads/dataset.csv"  # the path with username
dataset1 = pd.read_csv(dataset_path)    #accessing the dataset
dataset1.Decision.unique()
dataset1['Decision'].value_counts()
sns.countplot(x='Decision', data=dataset1, palette='husl')                                              #Plotting a bar char to show the classes
plt.show()

dataset1['Decision'] = dataset1['Decision'].map({'Yes':1,'No':0})
dataset1['Price'] = dataset1['Price'].map({'High':1,'Medium':0.5,'Low':0})
dataset1['Fabric'] = dataset1['Fabric'].map({'Cotton':1,'Lawn':0.5,'Silk':0})
dataset1['Colour'] = dataset1['Colour'].map({'Bright':1,'Dull':0})
dataset1['Design'] = dataset1['Design'].map({'Solid':1,'Print':0})
dataset1['Gender'] = dataset1['Gender'].map({'Male':1,'Female':0})
x = dataset1.drop(['Decision'],axis=1)                                                                               #Creating the input 'x' without Decision column
y = dataset1['Decision']                                                                                                      # Storing the output(diagnosis) as y
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.3,random_state=40)   # Taking 30% of the data(171 samples) for testing and 70% for training
                                                                                       # but keeping the correlation constant.

"""**Model_2: Decision Tree**


"""

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix, classification_report
import seaborn as sns
import matplotlib.pyplot as plt

# Assuming x_train, y_train, x_test, y_test are defined elsewhere

dtc = DecisionTreeClassifier()
model2 = dtc.fit(x_train, y_train)

# Evaluation
print("The Training accuracy of the model is {:.2f}".format(dtc.score(x_train, y_train)))
print("The Testing accuracy of the model is {:.2f}".format(dtc.score(x_test, y_test)))

prediction2 = model2.predict(x_test)
confmat2 = confusion_matrix(prediction2, y_test)

# Plot confusion matrix
sns.heatmap(confmat2, cmap="Pastel1_r", xticklabels=['class_0', 'class_1'], yticklabels=['class_0', 'class_1'], annot=True)
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.title('Confusion Matrix')
plt.show()

print("\nClassification report for Decision Tree:\n")
print(classification_report(y_test, prediction2))

import pandas as pd

# Assuming you have your trained model as 'model2' and your dataset features stored in a DataFrame 'dataset1'

# Create a DataFrame for the single instance
single_instance = pd.DataFrame({
    'Price': [1],
    'Fabric': [0],
    'Colour': [0],
    'Design': [0],
    'Gender': [1]
})

# Predict the output for the single instance
prediction_single_instance = model2.predict(single_instance)

# Print the predicted output
print("Predicted output for the single instance:", prediction_single_instance)